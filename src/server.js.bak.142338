import express from "express";
import morgan from "morgan";
import cors from "cors";
import cookieParser from "cookie-parser";
import { register, login, authMiddleware, refresh, logout, logoutAll } from "./auth.js";
import morgan from "morgan";
import cors from "cors";
import { PrismaClient } from "@prisma/client";
import authRouter, { authMiddleware } from "./auth.js";

const prisma = new PrismaClient();
const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());
app.use(morgan("tiny"));
app.use(cookieParser());         // ★ 추가

app.get("/healthz", (_req, res) => res.type("text").send("ok"));

app.get("/api/healthz", (_req, res) => res.type("text").send("ok"));

app.get("/api/version", (_req, res) =>
  res.json({
    app: process.env.APP_NAME || "node-backend",
    version: process.env.APP_VERSION || "0.0.0",
    commit: process.env.GIT_COMMIT || "unknown",
    builtAt: process.env.BUILD_TIME || "unknown",
    node: process.version,
  })
);

app.get('/db/ping', async (req, res) => {
  try {
    await prisma.$queryRaw`SELECT 1`;
    res.json({ db: 'ok' });
  } catch (e) {
    console.error(e);
    res.status(500).json({ db: 'error', message: e.message });
  }
});

app.use("/api/auth", authRouter);
app.post("/api/auth/register", register);
app.post("/api/auth/login",    login);
app.post("/api/auth/refresh",  refresh);
app.post("/api/auth/logout",   logout);
app.post("/api/auth/logout-all", logoutAll);
app.get ("/api/me",            authMiddleware, (req, res)=>res.json({ id:req.user.id, email:req.user.email, name:req.user.name, role:req.user.role }));

app.use((_req, res) => res.status(404).json({ error: "not_found" }));
app.use((err, _req, res, _next) => {
  console.error(err);
  res.status(500).json({ error: "server_error" });
});

app.listen(PORT, () => console.log(`Server running on http://127.0.0.1:${PORT}`));
